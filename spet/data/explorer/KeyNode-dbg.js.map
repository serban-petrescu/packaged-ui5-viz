{"version":3,"sources":["../../../../../src/spet/data/explorer/KeyNode.js"],"names":["metadata","properties","key","type","defaultValue","origin","setParent","oParent","update","setOrigin","bIsRoot","setProperty","getParent","getOrigin","addOrigin","removeOrigin"],"mappings":";;AAEA;;;;;;;;;;;AAQCA,U,EAAW;AACVC,eAAY;AACX;;;;;AAKAC,SAAK,EAACC,MAAM,QAAP,EAAiBC,cAAc,EAA/B,EANM;AAOX;;;;;;AAMAC,YAAQ,EAACF,MAAM,SAAP,EAAkBC,cAAc,KAAhC;AAbG;AADF,G;AAkBXE,W,qBAAUC,O,EAAS;AAClB,yCAAgBA,OAAhB;AACA,QAAKC,MAAL;AACA,G;AAEDC,W,qBAAUC,O,EAAS;AAClB,QAAKC,WAAL,CAAiB,QAAjB,EAA2BD,OAA3B;AACA,QAAKF,MAAL;AACA,G;AASDA,Q,oBAAS;AACR,OAAI,KAAKI,SAAL,EAAJ,EAAsB;AACrB,QAAI,KAAKC,SAAL,EAAJ,EAAsB;AACrB,UAAKD,SAAL,GAAiBE,SAAjB,CAA2B,IAA3B;AACA,KAFD,MAEO;AACN,UAAKF,SAAL,GAAiBG,YAAjB,CAA8B,IAA9B;AACA;AACD;AACD","file":"KeyNode.js","sourceRoot":"src","sourcesContent":["import Node from \"./Node\";\n\n/**\n * A node subclass which also has a unique key and a flag\n * indicating if it is an origin node.\n * @class\n * @name spet.data.explorer.KeyNode\n * @extends spet.data.explorer.Node\n */\nexport default class KeyNode extends Node {\n\tmetadata = {\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * The unique key of the node.\n\t\t\t * @name spet.data.explorer.KeyNode#key\n\t\t\t * @type {string}\n\t\t\t */\n\t\t\tkey: {type: \"string\", defaultValue: \"\"},\n\t\t\t/**\n\t\t\t * Flag indicating if the node is an origin node.\n\t\t\t * @name spet.data.explorer.KeyNode#origin\n\t\t\t * @type {boolean}\n\t\t\t * @default false\n\t\t\t */\n\t\t\torigin: {type: \"boolean\", defaultValue: false}\n\t\t}\n\t}\n\n\tsetParent(oParent) {\n\t\tsuper.setParent(oParent);\n\t\tthis.update();\n\t}\n\n\tsetOrigin(bIsRoot) {\n\t\tthis.setProperty(\"origin\", bIsRoot);\n\t\tthis.update();\n\t}\n\n\t/**\n\t * Updates the parent graph's origins association based on the\n\t * current value of the origin flag.\n\t * @method spet.data.explorer.KeyNode#update\n\t * @protected\n\t * @returns {void}\n\t */\n\tupdate() {\n\t\tif (this.getParent()) {\n\t\t\tif (this.getOrigin()) {\n\t\t\t\tthis.getParent().addOrigin(this);\n\t\t\t} else {\n\t\t\t\tthis.getParent().removeOrigin(this);\n\t\t\t}\n\t\t}\n\t}\n}"]}